"use strict";(self.webpackChunkherbjs_website=self.webpackChunkherbjs_website||[]).push([[9857],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return u}});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(n),u=i,k=m["".concat(o,".").concat(u)]||m[u]||d[u]||r;return n?a.createElement(k,s(s({ref:t},c),{},{components:n})):a.createElement(k,s({ref:t},c))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,s=new Array(r);s[0]=m;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:i,s[1]=l;for(var p=2;p<r;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},21562:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return o},metadata:function(){return p},toc:function(){return c},default:function(){return m}});var a=n(87462),i=n(63366),r=(n(67294),n(3905)),s=["components"],l={id:"herbs2knex",title:"Herbs2knex",sidebar_label:"Herbs2knex",slug:"/glues/Herbs2knex"},o="herbs2knex",p={unversionedId:"glues/herbs2knex",id:"glues/herbs2knex",title:"Herbs2knex",description:"herbs2knex creates repositories to retrieve and store Entities using Knex.",source:"@site/docs/glues/herbs2knex.md",sourceDirName:"glues",slug:"/glues/Herbs2knex",permalink:"/docs/glues/Herbs2knex",editUrl:"https://github.com/herbsjs/herbsjs.github.io/docs/glues/herbs2knex.md",tags:[],version:"current",frontMatter:{id:"herbs2knex",title:"Herbs2knex",sidebar_label:"Herbs2knex",slug:"/glues/Herbs2knex"},sidebar:"sidebar",previous:{title:"Herbs2Rest",permalink:"/docs/glues/herbs2rest"},next:{title:"Herbs Shelf",permalink:"/docs/glues/herbsshelf"}},c=[{value:"Installing",id:"installing",children:[],level:3},{value:"Using",id:"using",children:[],level:3},{value:"What is a Repository?",id:"what-is-a-repository",children:[],level:3},{value:"Herbs2knex Repository",id:"herbs2knex-repository",children:[],level:3},{value:"Why Knex?",id:"why-knex",children:[],level:3},{value:"Repository setup",id:"repository-setup",children:[],level:3},{value:"Retrieving and Persisting Data",id:"retrieving-and-persisting-data",children:[{value:"<code>find</code>",id:"find",children:[],level:3},{value:"findByID",id:"findbyid",children:[],level:3},{value:"insert",id:"insert",children:[],level:3},{value:"update",id:"update",children:[],level:3},{value:"delete",id:"delete",children:[],level:3},{value:"Conventions - Defaul implementation",id:"conventions---defaul-implementation",children:[{value:"Fields",id:"fields",children:[],level:4}],level:3},{value:"Object-Oriented versus Relational models - Relationships",id:"object-oriented-versus-relational-models---relationships",children:[],level:3}],level:2},{value:"TODO",id:"todo",children:[],level:2}],d={toc:c};function m(e){var t=e.components,n=(0,i.Z)(e,s);return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"herbs2knex"},"herbs2knex"),(0,r.kt)("p",null,"herbs2knex creates repositories to retrieve and store ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/herbsjs/gotu"},"Entities")," using ",(0,r.kt)("a",{parentName:"p",href:"http://knexjs.org"},"Knex"),"."),(0,r.kt)("h3",{id:"installing"},"Installing"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"   npm install @herbsjs/herbs2knex\n")),(0,r.kt)("h3",{id:"using"},"Using"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"connection.js")," - Knex initialization:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const knex = require('knex')\nconst config = require('./config')\nmodule.exports = knex(config)\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"itemRepository.js"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const { Repository } = require('@herbsjs/herbs2knex')\nconst connection = require('connection')\nconst { Item } = require('../domain/entities/item')\n\nclass ItemRepository extends Repository {\n    constructor() {\n        super({\n            entity: Item,\n            table: 'aTable',\n            ids: ['id'],\n            knex: connection\n        })\n    }\n\n    excludedItemFromLastWeek() {\n        ...\n    }\n}\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"someUsecase.js"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const repo = new ItemRepository()\nconst ret = await repo.findByID(1)\n")),(0,r.kt)("h3",{id:"what-is-a-repository"},"What is a Repository?"),(0,r.kt)("p",null,"A repository, by ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Domain-driven_design#Building_blocks"},"definition"),", is part of the layer to retrieve and store entities abstracting the underlying implementation. By using repositories, details of these implementation such as relational database, document-oriented databases, etc., should not leak to the domain code. In other words, no raw SQL queries on your use case or entity files."),(0,r.kt)("h3",{id:"herbs2knex-repository"},"Herbs2knex Repository"),(0,r.kt)("p",null,"In order to boost productivity, Herbs2knex provides ways to dynamically generate, on the fly (no code generation), a repository class based on your Entities and other metadata. "),(0,r.kt)("p",null,"These metadata are necessary to close the gap between OOP concepts and paradigms and those of relational databases. For example, it is necessary to specify primary keys and foreign keys as these information do not exist in the description of your domain."),(0,r.kt)("p",null,"Following Herbs architecture principals, it is not the intention of this lib to create yet another ORM or query builder but to create a bridge between your domain and an existing one (Knex)."),(0,r.kt)("h3",{id:"why-knex"},"Why Knex?"),(0,r.kt)("p",null,"Herbs2knex is just one of many bridges possible between Herbs and other packages."),(0,r.kt)("p",null,"The advantage of using Knex is that is a simple and flexible SQL query builder. It also supports Postgres, MSSQL, MySQL, MariaDB, SQLite3, Oracle and Amazon Redshift. Therefore, you can build your system using these databases out of the box."),(0,r.kt)("h3",{id:"repository-setup"},"Repository setup"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const { Repository } = require('@herbsjs/herbs2knex')\nconst connection = require('connection')  // Knex initialize instance\nconst { ProductItem } = require('../domain/entities/productItem')\n\nclass YourRepository extends Repository {\n    constructor() {\n        super({\n            entity: ProductItem,\n            schema: 'main',\n            table: 'product_items',\n            ids: ['id'],\n            foreignKeys: [{ customerId: String }],\n            knex: connection\n        })\n    }\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"entity")," - The ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/herbsjs/gotu"},"Entity")," to be used as reference "),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"entity: ProductItem\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"schema")," - The schema to be used  "),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"schema: 'production'\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"table")," - The name of the table in database"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"table: 'product_items'\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"ids")," - Primary keys"),(0,r.kt)("p",{parentName:"li"},"  Format: ",(0,r.kt)("inlineCode",{parentName:"p"},"['fieldName', 'fieldName', ...]")),(0,r.kt)("p",{parentName:"li"},"  There must be corresponding fields in the entity."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"ids: ['id']  // productItem.id\n")),(0,r.kt)("p",{parentName:"li"},"  or for composite primary key: "),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"ids: [`customerId`, `productId`]  // productItem.customerId , productItem.productId\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"foreignKeys")," (optional) - Foreign keys for the database table"),(0,r.kt)("p",{parentName:"li"},"  Usually, there is no corresponding fields declared in the entity for foreign keys. That is the reason it is necessary to inform the name and the type of the fields."),(0,r.kt)("p",{parentName:"li"},"  Format: ",(0,r.kt)("inlineCode",{parentName:"p"},"[{ fieldName: Type }, { fieldName: Type }, ...]")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"foreignKeys: [{ customerId: String }]\n")),(0,r.kt)("p",{parentName:"li"},"  The field names will te converted to a database names using conventions. Ex: ",(0,r.kt)("inlineCode",{parentName:"p"},"customer_id"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"knex")," - Knex initialize instance"),(0,r.kt)("p",{parentName:"li"},"  Check Knex ",(0,r.kt)("a",{parentName:"p",href:"http://knexjs.org/#Installation-client"},"documentation")))),(0,r.kt)("h2",{id:"retrieving-and-persisting-data"},"Retrieving and Persisting Data"),(0,r.kt)("h3",{id:"find"},(0,r.kt)("inlineCode",{parentName:"h3"},"find")),(0,r.kt)("p",null,"Find entities matched by the filter, or empty array ",(0,r.kt)("inlineCode",{parentName:"p"},"[]")," if there is no matching entity."),(0,r.kt)("p",null,"Format: ",(0,r.kt)("inlineCode",{parentName:"p"},".find(options)")," where ",(0,r.kt)("inlineCode",{parentName:"p"},"options")," is a optional object containing ",(0,r.kt)("inlineCode",{parentName:"p"},"{ where, limit, offset, orderBy }")),(0,r.kt)("p",null,"Return: Entity array"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const repo = new ItemRepository(injection)\nconst ret = await repo.find()\n")),(0,r.kt)("p",null,"Options:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"where"),"\nAdds a filter to the query with given values.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const repo = new ItemRepository(injection)\nconst ret = await repo.find({ where: { name: ["Anne"] } })\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"limit"),"\nAdds a limit clause to the query.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const repo = new ItemRepository(injection)\nconst ret = await repo.find({ limit: 10 })\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"offset"),"\nAdds an offset clause to the query.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const repo = new ItemRepository(injection)\nconst ret = await repo.find({ offset: 5 })\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"orderBy"),"\nAdds an order by clause to the query. Column can be string, or list mixed with string and object.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// order by collum\nconst repo = new ItemRepository(injection)\nconst ret = await repo.find({ orderBy: 'description'})\n\n// order by complex query\nconst repo = new ItemRepository(injection)\nconst ret = await repo.find({ orderBy: [{ column: 'nome', order: 'desc' }, 'email'] })\n")),(0,r.kt)("h3",{id:"findbyid"},"findByID"),(0,r.kt)("p",null,"Find entities by IDs"),(0,r.kt)("p",null,"Format: ",(0,r.kt)("inlineCode",{parentName:"p"},".findByID(id)")," where ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," is a value or an array."),(0,r.kt)("p",null,"Return: Entity array"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const repo = new ItemRepository(injection)\nconst ret = await repo.findByID(10)\n")),(0,r.kt)("h3",{id:"insert"},"insert"),(0,r.kt)("p",null,"Insert an Entity into a table."),(0,r.kt)("p",null,"Format: ",(0,r.kt)("inlineCode",{parentName:"p"},".insert(entity)")," where ",(0,r.kt)("inlineCode",{parentName:"p"},"entity")," is a Entity instance with values to be persisted."),(0,r.kt)("p",null,"Return: The inserted entity with the values from database."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const repo = new ItemRepository(injection)\nconst ret = await repo.insert(aNewEntity)\n")),(0,r.kt)("h3",{id:"update"},"update"),(0,r.kt)("p",null,"Update an Entity."),(0,r.kt)("p",null,"Format: ",(0,r.kt)("inlineCode",{parentName:"p"},".update(entity)")," where ",(0,r.kt)("inlineCode",{parentName:"p"},"entity")," is an Entity instance with values to be persisted."),(0,r.kt)("p",null,"Return: The updated entity with the values from database."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const repo = new ItemRepository(injection)\nconst ret = await repo.update(aModifiedEntity)\n")),(0,r.kt)("h3",{id:"delete"},"delete"),(0,r.kt)("p",null,"Delete an Entity."),(0,r.kt)("p",null,"Format: ",(0,r.kt)("inlineCode",{parentName:"p"},".delete(entity)")," where ",(0,r.kt)("inlineCode",{parentName:"p"},"entity")," is an Entity instance to be deleted."),(0,r.kt)("p",null,"Return: ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," for success or ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," for error"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const repo = new ItemRepository(injection)\nconst ret = await repo.delete(entity)\n")),(0,r.kt)("h3",{id:"conventions---defaul-implementation"},"Conventions - Defaul implementation"),(0,r.kt)("h4",{id:"fields"},"Fields"),(0,r.kt)("p",null,"Code: Camel Case - ex: ",(0,r.kt)("inlineCode",{parentName:"p"},"productName")),(0,r.kt)("p",null,"Database: Snake Case - ex: ",(0,r.kt)("inlineCode",{parentName:"p"},"product_name")),(0,r.kt)("h3",{id:"object-oriented-versus-relational-models---relationships"},"Object-Oriented versus Relational models - Relationships"),(0,r.kt)("p",null,"An entity can define a reference for others entities but will not (and should not) define a foreign key. For instance:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+------------------+         +------------------+         +------------------+\n|      Orders      |         |    OrderItems    |         |     Products     |\n+------------------+         +------------------+         +------------------+\n| id: int          |----\\    | id: int          |       --| id: int          |\n| customer_id: int |     ----| order_id: int    |  ----/  | name: string     |\n+------------------+         | product_id: int  |-/       +------------------+\n                            +------------------+                             \n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const Product = entity('Product', {\n    id: id(Number),\n    name: field(String),\n    ...\n})\n\nconst OrderItem = entity('Order Items', {\n    id: id(Number),\n    product: field(Product),    // optional\n    ...\n})\n\nconst Order = entity('Order', {\n    id: id(Number),\n    item: field([OrderItem]),     // optional\n    ...\n})\n")),(0,r.kt)("p",null,"More about: ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Object%E2%80%93relational_impedance_mismatch"},"https://en.wikipedia.org/wiki/Object%E2%80%93relational_impedance_mismatch")),(0,r.kt)("h2",{id:"todo"},"TODO"),(0,r.kt)("ul",{className:"contains-task-list"},(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Allow only scalar types for queries (don't allow entity / object types)"),(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Allow to ommit schema's name")),(0,r.kt)("p",null,"Features:"),(0,r.kt)("ul",{className:"contains-task-list"},(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Be able to change the conventions (injection)"),(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Exclude / ignore fields on a sql statement"),(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Awareness of created/updated at/by fields"),(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Plug-and-play knex"),(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Easy access knex structure")),(0,r.kt)("p",null,"Retrieving and Persist:"),(0,r.kt)("ul",{className:"contains-task-list"},(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","insert",(0,r.kt)("ul",{parentName:"li",className:"contains-task-list"},(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","batchs"))),(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","update",(0,r.kt)("ul",{parentName:"li",className:"contains-task-list"},(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","batchs"))),(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","delete"),(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","persist (upsert)"),(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","find (ID)",(0,r.kt)("ul",{parentName:"li",className:"contains-task-list"},(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","deal with entities / tables with multiples IDs"))),(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","find by (any field)",(0,r.kt)("ul",{parentName:"li",className:"contains-task-list"},(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","deal with entities / tables with multiples IDs"),(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","order by"))),(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","find All",(0,r.kt)("ul",{parentName:"li",className:"contains-task-list"},(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","order by"))),(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","find with pages"),(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","first"),(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","last")),(0,r.kt)("p",null,"Tests:"),(0,r.kt)("ul",{className:"contains-task-list"},(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Pure JS"),(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Postgress"),(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Sql Server")))}m.isMDXComponent=!0}}]);