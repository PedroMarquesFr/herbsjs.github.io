"use strict";(self.webpackChunkherbjs=self.webpackChunkherbjs||[]).push([[8669],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return v}});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var u=a.createContext({}),s=function(e){var n=a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=s(e.components);return a.createElement(u.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,u=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=s(t),v=i,m=p["".concat(u,".").concat(v)]||p[v]||d[v]||r;return t?a.createElement(m,l(l({ref:n},c),{},{components:t})):a.createElement(m,l({ref:n},c))}));function v(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,l=new Array(r);l[0]=p;var o={};for(var u in n)hasOwnProperty.call(n,u)&&(o[u]=n[u]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var s=2;s<r;s++)l[s]=t[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},13080:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return o},contentTitle:function(){return u},metadata:function(){return s},toc:function(){return c},default:function(){return p}});var a=t(87462),i=t(63366),r=(t(67294),t(3905)),l=["components"],o={id:"what-suma",title:"What's Suma?",sidebar_label:"What's Suma?",slug:"/validation/what-suma"},u=void 0,s={unversionedId:"validation/what-suma",id:"validation/what-suma",title:"What's Suma?",description:"Suma helps with single value validations.",source:"@site/docs/validation/what-is-suma.md",sourceDirName:"validation",slug:"/validation/what-suma",permalink:"/docs/validation/what-suma",editUrl:"https://github.com/herbsjs/herbsjs.github.io/docs/validation/what-is-suma.md",tags:[],version:"current",frontMatter:{id:"what-suma",title:"What's Suma?",sidebar_label:"What's Suma?",slug:"/validation/what-suma"},sidebar:"sidebar",previous:{title:"Validations",permalink:"/docs/entity/validation"},next:{title:"Validations",permalink:"/docs/validation/validations"}},c=[{value:"Installing",id:"installing",children:[],level:3},{value:"Using",id:"using",children:[],level:3},{value:"Custom functions",id:"custom-functions",children:[],level:3},{value:"Null Values",id:"null-values",children:[],level:3}],d={toc:c};function p(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Suma helps with single value validations."),(0,r.kt)("p",null,"Extensible, test covered and errors code only!"),(0,r.kt)("p",null,"Suma does not validate schema or objects, just single values. For schema validation take a look at ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/herbsjs/gotu"},(0,r.kt)("inlineCode",{parentName:"a"},"herbjs/gotu")),"."),(0,r.kt)("h3",{id:"installing"},"Installing"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"   $ npm install @herbsjs/suma\n")),(0,r.kt)("h3",{id:"using"},"Using"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const { validate } = require('@herbsjs/suma')\n\nconst value = null\nconst validations = { presence: true }\nconst result = validate(value, validations)\n/* {\n    value: null,\n    errors: [{ cantBeEmpty: true }]\n} */\n")),(0,r.kt)("h3",{id:"custom-functions"},"Custom functions"),(0,r.kt)("p",null,"Execute custom functions to specific validations cases"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"propName")," (string) - Name of the validation rule returned on error - ",(0,r.kt)("em",{parentName:"p"},"this is optional, see below example of usage")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"validation")," (function: boolean) - Function that will be called with value argument ",(0,r.kt)("em",{parentName:"p"},"this is optional, see below example of usage")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'\nconst cardNumber = "123467890123456"\n// Single function validation with valid value\nconst validations = { custom: { invalidCardNumber: (value) => value.length === 16 } }\nconst result = validate(cardNumber, validations);\n/* {\n    value: \'123467890123456\',\n    errors: []\n} */\n//\n\nconst cardNumber = "1234"\n\n// Single function validation with invalid value\nconst validations = { custom: { invalidCardNumber: (value) => value.length === 16 } }\nconst result = validate(cardNumber, validations);\n/* {\n    value: \'1234\',\n    errors: [{ "invalidCardNumber": true }]\n} */\n//\n\n// Multiple functions validation with invalid value\nconst validations = {\n    custom: {\n        invalidCardNumber: (value) => value.length === 16,\n        invalidDigit: (value) => value[0] !== "2",\n    },\n}\nconst result = validate(cardNumber, validations)\n/* {\n    value: \'1234\',\n    errors: [\n        {  "invalidCardNumber": true },\n        {  "invalidDigit": true },\n    }]\n} */\n//\n\n\n// Multiple functions validation with parcial valid values\nconst cardNumber = "12345678910111213"\n\nconst validations = {\n    custom: {\n        invalidCardNumber: (value) => value.length === 16,\n        invalidDigit: (value) => value[0] !== "2",\n    },\n}\nconst result = validate(cardNumber, validations)\n/* {\n    value: \'12345678910111213\',\n    errors: [\n        {  "invalidDigit": true },\n    }]\n} */\n//\n\n')),(0,r.kt)("p",null,"You can also extract validation for variables, if you want to make your code more reusable and customizable"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'\n// Single Validation with custom propName\n\nconst cardNumber = "1234"\n\nconst propName = "invalidCardNumber";\nconst validation = (value) => value.length === 16\nconst validations = {\n    custom: { [propName]: validation }, }\n\nconst result = validate(cardNumber, validations);\n/* {\n    value: \'1234\',\n    errors: [{ "invalidCardNumber": true }]\n} */\n//\n\n')),(0,r.kt)("h3",{id:"null-values"},"Null Values"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"type"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"length"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"numericality"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"format")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"datetime")," validators won't validate a value if it's ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined"),"."),(0,r.kt)("p",null,"To ensure your value is not null, use ",(0,r.kt)("inlineCode",{parentName:"p"},"allowNull: false")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"presence: true"),"."))}p.isMDXComponent=!0}}]);