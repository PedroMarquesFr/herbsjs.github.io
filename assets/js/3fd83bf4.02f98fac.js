"use strict";(self.webpackChunkherbjs_website=self.webpackChunkherbjs_website||[]).push([[2452],{3905:function(e,t,n){n.d(t,{Zo:function(){return o},kt:function(){return d}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),u=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},o=function(e){var t=u(e.components);return a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,c=e.parentName,o=i(e,["components","mdxType","originalType","parentName"]),h=u(n),d=r,v=h["".concat(c,".").concat(d)]||h[d]||p[d]||s;return n?a.createElement(v,l(l({ref:t},o),{},{components:n})):a.createElement(v,l({ref:t},o))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,l=new Array(s);l[0]=h;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var u=2;u<s;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},84769:function(e,t,n){n.r(t),n.d(t,{assets:function(){return o},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return i},metadata:function(){return u},toc:function(){return p}});var a=n(87462),r=n(63366),s=(n(67294),n(3905)),l=["components"],i={id:"checkers",title:"Checkers",sidebar_label:"Checkers",slug:"/validation/checkers"},c=void 0,u={unversionedId:"validation/checkers",id:"validation/checkers",title:"Checkers",description:"Checkers allow users to validate data with simple functions",source:"@site/docs/validation/checkers.md",sourceDirName:"validation",slug:"/validation/checkers",permalink:"/docs/validation/checkers",editUrl:"https://github.com/herbsjs/herbsjs.github.io/blob/master/docs/validation/checkers.md",tags:[],version:"current",frontMatter:{id:"checkers",title:"Checkers",sidebar_label:"Checkers",slug:"/validation/checkers"},sidebar:"sidebar",previous:{title:"Validations",permalink:"/docs/validation/validations"},next:{title:"What's glues",permalink:"/docs/glues"}},o={},p=[{value:"isFunction",id:"isfunction",level:3},{value:"isDefined",id:"isdefined",level:3},{value:"isArray",id:"isarray",level:3},{value:"isIterable",id:"isiterable",level:3},{value:"isString",id:"isstring",level:3},{value:"isBoolean",id:"isboolean",level:3},{value:"isNumber",id:"isnumber",level:3},{value:"isDate",id:"isdate",level:3},{value:"isRegExp",id:"isregexp",level:3},{value:"isInstanceOf",id:"isinstanceof",level:3},{value:"isObject",id:"isobject",level:3},{value:"isEmpty",id:"isempty",level:3},{value:"isValidFormat",id:"isvalidformat",level:3},{value:"isValidEmail",id:"isvalidemail",level:3},{value:"isValidURL",id:"isvalidurl",level:3},{value:"isValidJavascriptIdentifier",id:"isvalidjavascriptidentifier",level:3},{value:"isTooShort",id:"istooshort",level:3},{value:"isTooLong",id:"istoolong",level:3},{value:"isWrongLength",id:"iswronglength",level:3},{value:"isEqualTo",id:"isequalto",level:3},{value:"isGreaterThan",id:"isgreaterthan",level:3},{value:"isGreaterThanOrEqualTo",id:"isgreaterthanorequalto",level:3},{value:"isLessThan",id:"islessthan",level:3},{value:"isLessThanOrEqualTo",id:"islessthanorequalto",level:3},{value:"isInteger",id:"isinteger",level:3},{value:"isBeforeThan",id:"isbeforethan",level:3},{value:"isAfterThan",id:"isafterthan",level:3},{value:"isAt",id:"isat",level:3},{value:"contains",id:"contains",level:3}],h={toc:p};function d(e){var t=e.components,n=(0,r.Z)(e,l);return(0,s.kt)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Checkers allow users to validate data with simple functions"),(0,s.kt)("h3",{id:"isfunction"},"isFunction"),(0,s.kt)("p",null,"Validates the the value is a function"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const { checker } = require('@herbsjs/suma')\n\nfunction sampleFunc () {}\nconst ret = checker.isFunction(sampleFunc)\nconsole.log(ret)\n\n/* Output: true */\n")),(0,s.kt)("h3",{id:"isdefined"},"isDefined"),(0,s.kt)("p",null,"Validates if the value is different from null or undefined"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const { checker } = require('@herbsjs/suma')\n\nconst samples = [\n    null,\n    undefined,\n    ''\n]\nfor (const value of samples) {\n    const ret = checker.isDefined(value)\n    console.log(ret)    \n}\n\n\n/* Output: false, false, true */\n")),(0,s.kt)("h3",{id:"isarray"},"isArray"),(0,s.kt)("p",null,"Validates if the value is a array"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const { checker } = require('@herbsjs/suma')\n\nconst value = ['a', 'b', 'c']\nconst ret = checker.isArray(value)\nconsole.log(ret)\n\n/* Output: true */\n")),(0,s.kt)("h3",{id:"isiterable"},"isIterable"),(0,s.kt)("p",null,"Validates if the value is iterable"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const { checker } = require('@herbsjs/suma')\n\nconst value =  [{ name: 'jhon', age: 35},{ name: 'marie', age: 29}]\nconst ret = checker.isIterable(value)\nconsole.log(ret)\n\n/* Output: true */\n")),(0,s.kt)("h3",{id:"isstring"},"isString"),(0,s.kt)("p",null,"Validates if the value is a string"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const { checker } = require('@herbsjs/suma')\n\nconst value =  'herbs validators'\nconst ret = checker.isString(value)\nconsole.log(ret)\n\n/* Output: true */\n")),(0,s.kt)("h3",{id:"isboolean"},"isBoolean"),(0,s.kt)("p",null,"Validates if the value is a boolean"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const { checker } = require('@herbsjs/suma')\n\nconst value =  false\nconst ret = checker.isBoolean(value)\nconsole.log(ret)\n\n/* Output: true */\n")),(0,s.kt)("h3",{id:"isnumber"},"isNumber"),(0,s.kt)("p",null,"Validates if the value is a boolean"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const { checker } = require('@herbsjs/suma')\n\nconst value =  152\nconst ret = checker.isNumber(value)\nconsole.log(ret)\n\n/* Output: true */\n")),(0,s.kt)("h3",{id:"isdate"},"isDate"),(0,s.kt)("p",null,"Validates if the value is a date"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const { checker } = require('@herbsjs/suma')\n\nconst value = new Date(1900, 5, 1)\nconst ret = checker.isDate(value)\nconsole.log(ret)\n\n/* Output: true */\n")),(0,s.kt)("h3",{id:"isregexp"},"isRegExp"),(0,s.kt)("p",null,"Validates if the value is a regex expression"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const { checker } = require('@herbsjs/suma')\n\nconst value = /^[0-9]{8}$/\nconst ret = checker.isRegExp(value)\nconsole.log(ret)\n\n/* Output: true */\n")),(0,s.kt)("h3",{id:"isinstanceof"},"isInstanceOf"),(0,s.kt)("p",null,"Validates if the value is a instance of a defined type"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const { checker } = require('@herbsjs/suma')\n\nclass CustomClass {}\n\nconst value = new CustomClass()\nconst ret = checker.isInstanceOf(value, CustomClass)\nconsole.log(ret)\n\n/* Output: true */\n")),(0,s.kt)("h3",{id:"isobject"},"isObject"),(0,s.kt)("p",null,"Validates if the value is an object"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const { checker } = require('@herbsjs/suma')\n\nclass SampleClass {}\nconst samples = [\n    {},\n    new Object(),\n    new SampleClass(),\n    [],\n    'herbs',\n    true\n]\nfor (const value of samples) {\n    const ret = checker.isObject(value)    \n    console.log(ret)\n}\n\n/* Output: true, true, true, true, false, false */\n")),(0,s.kt)("h3",{id:"isempty"},"isEmpty"),(0,s.kt)("p",null,"Validates if the value is empty"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const { checker } = require('@herbsjs/suma')\n\nconst samples = [\n    '',\n    ' ',\n    [],\n    {},\n    'herbs',\n    22\n]\nfor (const value of samples) {\n    const ret = checker.isEmpty(value)\n    console.log(ret)\n}\n\n/* Output: true, true, true, true, false, false */\n")),(0,s.kt)("h3",{id:"isvalidformat"},"isValidFormat"),(0,s.kt)("p",null,"Validates a regex expression to test a value"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const { checker } = require('@herbsjs/suma')\n\nconst value = 45125\nconst ret = checker.isValidFormat(value, /^[0-9]{8}$/)\nconsole.log(ret)\n\n/* Output: true */\n")),(0,s.kt)("h3",{id:"isvalidemail"},"isValidEmail"),(0,s.kt)("p",null,"Validates if the value is an e-mail"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const { checker } = require('@herbsjs/suma')\n\nconst value = 'herbs@email.com'\nconst ret = checker.isValidEmail(value)\nconsole.log(ret)\n\n/* Output: true */\n")),(0,s.kt)("h3",{id:"isvalidurl"},"isValidURL"),(0,s.kt)("p",null,"Validates if the value is an url"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const { checker } = require('@herbsjs/suma')\n\nconst value = 'http://herbsjs.org'\nconst ret = checker.isValidURL(value)\nconsole.log(ret)\n\n/* Output: true */\n")),(0,s.kt)("h3",{id:"isvalidjavascriptidentifier"},"isValidJavascriptIdentifier"),(0,s.kt)("p",null,"Validates if the value is a valid javascript identifier"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const { checker } = require('@herbsjs/suma')\n\nconst value = 'herbs'\nconst ret = checker.isValidJavascriptIdentifier(value)\nconsole.log(ret)\n\n/* Output: true */\n")),(0,s.kt)("h3",{id:"istooshort"},"isTooShort"),(0,s.kt)("p",null,"Validates if the value is greater than a defined minimum value "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const { checker } = require('@herbsjs/suma')\n\nconst value = 'herbs'\nconst ret = checker.isTooShort(value, 3)\nconsole.log(ret)\n\n/* Output: true */\n")),(0,s.kt)("h3",{id:"istoolong"},"isTooLong"),(0,s.kt)("p",null,"Validates if the value is less than a defined maximum value"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const { checker } = require('@herbsjs/suma')\n\nconst value = 'herbs'\nconst ret = checker.isTooLong(value, 10)\nconsole.log(ret)\n\n/* Output: true */\n")),(0,s.kt)("h3",{id:"iswronglength"},"isWrongLength"),(0,s.kt)("p",null,"Validates if the value has a length equal to the defined value"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const { checker } = require('@herbsjs/suma')\n\nconst value = 'herbs'\nconst ret = checker.isWrongLength(value, 5)\nconsole.log(ret)\n\n/* Output: true */\n")),(0,s.kt)("h3",{id:"isequalto"},"isEqualTo"),(0,s.kt)("p",null,"Validates if the first value is equals to second value"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const { checker } = require('@herbsjs/suma')\n\nconst ret = checker.isEqualTo(1520, 1520)\nconsole.log(ret)\n\n/* Output: true */\n")),(0,s.kt)("h3",{id:"isgreaterthan"},"isGreaterThan"),(0,s.kt)("p",null,"Validates if the first number is greater than second number"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const { checker } = require('@herbsjs/suma')\n\nconst ret = checker.isGreaterThan(100, 50)\nconsole.log(ret)\n\n/* Output: true */\n")),(0,s.kt)("h3",{id:"isgreaterthanorequalto"},"isGreaterThanOrEqualTo"),(0,s.kt)("p",null,"Validates if the first number is greater than or equals to second number"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const { checker } = require('@herbsjs/suma')\n\nconst ret = checker.isGreaterThanOrEqualTo(100, 100)\nconsole.log(ret)\n\n/* Output: true */\n")),(0,s.kt)("h3",{id:"islessthan"},"isLessThan"),(0,s.kt)("p",null,"Validates if the first number is less than second number"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const { checker } = require('@herbsjs/suma')\n\nconst ret = checker.isLessThan(50, 100)\nconsole.log(ret)\n\n/* Output: true */\n")),(0,s.kt)("h3",{id:"islessthanorequalto"},"isLessThanOrEqualTo"),(0,s.kt)("p",null,"Validates if the first number is less than or equals to second number"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const { checker } = require('@herbsjs/suma')\n\nconst ret = checker.isLessThanOrEqualTo(100, 100)\nconsole.log(ret)\n\n/* Output: true */\n")),(0,s.kt)("h3",{id:"isinteger"},"isInteger"),(0,s.kt)("p",null,"Validates if the value is a integer number"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const { checker } = require('@herbsjs/suma')\n\nconst ret = checker.isInteger(10)\nconsole.log(ret)\n\n/* Output: true */\n")),(0,s.kt)("h3",{id:"isbeforethan"},"isBeforeThan"),(0,s.kt)("p",null,"Validates if the first date is before than second date"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const { checker } = require('@herbsjs/suma')\n\nconst ret = checker.isBeforeThan(new Date(1900, 2, 1), new Date(1991, 2, 1))\nconsole.log(ret)\n\n/* Output: true */\n")),(0,s.kt)("h3",{id:"isafterthan"},"isAfterThan"),(0,s.kt)("p",null,"Validates if the first date is before than second date"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const { checker } = require('@herbsjs/suma')\n\nconst ret = checker.isBeforeThan(new Date(1991, 2, 1), new Date(1900, 2, 1))\nconsole.log(ret)\n\n/* Output: true */\n")),(0,s.kt)("h3",{id:"isat"},"isAt"),(0,s.kt)("p",null,"Validates if the first date is equals to second date"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const { checker } = require('@herbsjs/suma')\n\nconst ret = checker.isAt(new Date(1991, 2, 1), new Date(1991, 2, 1))\nconsole.log(ret)\n\n/* Output: true */\n")),(0,s.kt)("h3",{id:"contains"},"contains"),(0,s.kt)("p",null,"Validates if the value contains in the object or array"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const { checker } = require('@herbsjs/suma')\n\nconst values = ['apple', 'orange']\nconst ret = checker.isAt(values, 'orange')\nconsole.log(ret)\n\n/* Output: true */\n")))}d.isMDXComponent=!0}}]);