"use strict";(self.webpackChunkherbjs=self.webpackChunkherbjs||[]).push([[7413],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return h}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),h=o,g=d["".concat(l,".").concat(h)]||d[h]||u[h]||a;return n?r.createElement(g,i(i({ref:t},c),{},{components:n})):r.createElement(g,i({ref:t},c))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},71295:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},metadata:function(){return l},toc:function(){return p},default:function(){return u}});var r=n(87462),o=n(63366),a=(n(67294),n(3905)),i=["components"],s={id:"repository",title:"3. Generating Repositories",sidebar_label:"3. Generating Repositories",slug:"/tutorial/repository"},l={unversionedId:"tutorial/repository",id:"tutorial/repository",isDocsHomePage:!1,title:"3. Generating Repositories",description:"Database Config Files",source:"@site/docs/tutorial/repository.md",sourceDirName:"tutorial",slug:"/tutorial/repository",permalink:"/docs/tutorial/repository",editUrl:"https://github.com/herbsjs/herbsjs.github.io/docs/tutorial/repository.md",version:"current",sidebar_label:"3. Generating Repositories",frontMatter:{id:"repository",title:"3. Generating Repositories",sidebar_label:"3. Generating Repositories",slug:"/tutorial/repository"},sidebar:"sidebar",previous:{title:"2. Creating Entities",permalink:"/docs/tutorial/create-entity"},next:{title:"4. Creating Use Cases",permalink:"/docs/tutorial/create-usecase"}},p=[{value:"Database Config Files",id:"database-config-files",children:[{value:"Set up with Mongo",id:"set-up-with-mongo",children:[]},{value:"Set up with PostgreSQL",id:"set-up-with-postgresql",children:[]}]},{value:"Creating Database and Migration",id:"creating-database-and-migration",children:[{value:"<code>database/</code>",id:"database",children:[]},{value:"<code>repositories/</code>",id:"repositories",children:[]}]},{value:"Repository Setup",id:"repository-setup",children:[]}],c={toc:p};function u(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"database-config-files"},"Database Config Files"),(0,a.kt)("p",null,"Before we start using the database, is required to set up the configurations. We can choose between ",(0,a.kt)("inlineCode",{parentName:"p"},"mongo")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"postgres")," database to store the data, so the setup is slightly different for each one of them. You can go directly to the one you've chosen:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://mongodb.com"},"Mongo")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://www.postgresql.org"},"PostgreSQL"))),(0,a.kt)("h3",{id:"set-up-with-mongo"},"Set up with Mongo"),(0,a.kt)("p",null,"The configuration file is ",(0,a.kt)("inlineCode",{parentName:"p"},"src/config/mongo.js"),". It looks like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// src/config/mongo.js\nconst env = require('sugar-env')\nrequire('dotenv').config()\n\nmodule.exports = {\n  dbName: env.get(`$MONGO_DATABASE`, 'herbs-project'),\n  connstr: env.get(`$MONGO_CONN_STR`, 'mongodb://localhost:27017'),\n}\n")),(0,a.kt)("p",null,"So you can provide a custom name and connection URL for the database using the environment variables or use the default ones."),(0,a.kt)("h3",{id:"set-up-with-postgresql"},"Set up with PostgreSQL"),(0,a.kt)("p",null,"The configuration file is ",(0,a.kt)("inlineCode",{parentName:"p"},"src/config/postgres.js"),". It looks like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// src/config/postgres.js\nconst env = require('sugar-env')\nrequire('dotenv').config()\n\nmodule.exports = {\n  client: 'pg',\n  connection: {\n    host: '127.0.0.1',\n    user: 'postgres',\n    password: 'postgres',\n    database: 'herbs-project'\n  }\n}\n")),(0,a.kt)("p",null,"Here you can change their values to match with your credentials, database name, host, etc."),(0,a.kt)("h2",{id:"creating-database-and-migration"},"Creating Database and Migration"),(0,a.kt)("p",null,"After creating the database with the name explained above, you can found the files to setup the database in ",(0,a.kt)("inlineCode",{parentName:"p"},"src/infra/data/"),"."),(0,a.kt)("p",null,"There we have two folders:"),(0,a.kt)("h3",{id:"database"},(0,a.kt)("inlineCode",{parentName:"h3"},"database/")),(0,a.kt)("p",null,"To set up the database connection."),(0,a.kt)("p",null,"With the ",(0,a.kt)("a",{parentName:"p",href:"/docs/tutorial/new-project"},"automatic project creation"),", there is an ",(0,a.kt)("inlineCode",{parentName:"p"},"index.js")," file making the connection with the database."),(0,a.kt)("p",null,"This file is dependent of which database you choose, in the case of ",(0,a.kt)("inlineCode",{parentName:"p"},"mongo")," it should be like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// src/infra/data/database/index.js\nconst { MongoClient } = require('mongodb')\n\nlet dbInstance = null;\n\nmodule.exports = {\n    factory: async (config) => {\n        if (dbInstance) {\n            return new Promise((resolve) => resolve(dbInstance))\n        }\n        const client = await new MongoClient(config.database.connstr, {\n            useNewUrlParser: true,\n            useUnifiedTopology: true\n        }).connect()\n        dbInstance = client.db(config.database.name)\n        return dbInstance\n    }\n}\n")),(0,a.kt)("h3",{id:"repositories"},(0,a.kt)("inlineCode",{parentName:"h3"},"repositories/")),(0,a.kt)("p",null,"To develop the repositories for each entity."),(0,a.kt)("p",null,"With the ",(0,a.kt)("a",{parentName:"p",href:"/docs/tutorial/new-project"},"automatic project creation"),", there are two important files:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"index.js")," - Requiring all the necessary repositories and providing the database connection to them."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"baseRepository.js")," - To be used as a boilerplate and make easy to create repositories.")),(0,a.kt)("p",null,"If you want to create your own, or did not use ",(0,a.kt)("inlineCode",{parentName:"p"},"herbs-cli"),", the ",(0,a.kt)("inlineCode",{parentName:"p"},"index.js")," should be like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// Receive the database connection\nasync function factory(conn) {\n    return {\n        // Return each repository, providing the connection to them\n        userRepository: await new (require('./userRepository.js'))(conn)\n    }\n}\n\nmodule.exports = factory\n")),(0,a.kt)("h2",{id:"repository-setup"},"Repository Setup"),(0,a.kt)("p",null,"To setup a new repository, you may use the ",(0,a.kt)("inlineCode",{parentName:"p"},"BaseRepository")," and then set the options as you want."),(0,a.kt)("p",null,"For example, let's setup the list repository:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// src/infra/data/repositories/listRepository.js\nconst Repository = require('./baseRepository')\n\nmodule.exports = class ListRepository extends Repository {\n    constructor(mongoInstance){\n        super({ \n            collection: 'list',  \n            mongo: mongoInstance  \n        })\n    }\n}\n")))}u.isMDXComponent=!0}}]);